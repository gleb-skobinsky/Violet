---
openapi: "3.0.3"
jsonSchemaDialect: "https://json-schema.org/draft/2020-12/schema"
info:
  title: "Violet API"
  version: "1.0.0"
  summary: "Swagger documentation for the Violet backend API"
  description: "Here you can find all the necessary endpoints to consume the Violet\
    \ API"
  termsOfService: "https://example.com"
  contact:
    name: "Gleb Gutnik"
  license:
    name: "Open license"
servers: []
paths:
  /login:
    post:
      tags:
      - "Auth Repository"
      summary: "Login"
      description: "Login a user with his username and password"
      parameters: []
      requestBody:
        description: "Login a user"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SimpleUser"
        required: true
      responses:
        "201":
          description: "User successfully logged in"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenData"
      deprecated: false
    parameters: []
  /refresh:
    post:
      tags:
      - "Auth Repository"
      summary: "Refresh"
      description: "Refresh JWT token"
      parameters: []
      requestBody:
        description: "Refresh a token"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RefreshToken"
        required: true
      responses:
        "200":
          description: "Token successfully refreshed"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenData"
      deprecated: false
    parameters: []
  /signup:
    post:
      tags:
      - "Auth Repository"
      summary: "User signup"
      description: "Sign up a user with their email and password"
      parameters: []
      requestBody:
        description: "Register a user"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SimpleUser"
        required: true
      responses:
        "201":
          description: "User successfully registered"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SignupResponse"
      deprecated: false
    parameters: []
  /users/{id}:
    get:
      tags:
      - "Users Repository"
      summary: "Get a user"
      description: "User retrieval endpoint"
      parameters:
      - name: "id"
        in: "path"
        schema:
          type: "number"
          format: "int32"
        required: true
        deprecated: false
      responses:
        "200":
          description: "User successfully retrieved"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExposedUser"
        "404":
          description: "User not found"
        "400":
          description: "User request is inavlid"
      deprecated: false
      security:
      - matchme-jwt-auth: []
    put:
      tags:
      - "Users Repository"
      summary: "Update a user"
      description: "User update endpoint"
      parameters:
      - name: "id"
        in: "path"
        schema:
          type: "number"
          format: "int32"
        required: true
        deprecated: false
      requestBody:
        description: "Update a user"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExposedUser"
        required: true
      responses:
        "200":
          description: "User successfully updated"
        "400":
          description: "User update request is invalid"
      deprecated: false
      security:
      - matchme-jwt-auth: []
    delete:
      tags:
      - "Users Repository"
      summary: "Delete a user"
      description: "User deletion endpoint"
      parameters:
      - name: "id"
        in: "path"
        schema:
          type: "number"
          format: "int32"
        required: true
        deprecated: false
      responses:
        "200":
          description: "User successfully deleted"
        "400":
          description: "User deletion request is invalid"
      deprecated: false
      security:
      - matchme-jwt-auth: []
    parameters: []
webhooks: {}
components:
  schemas:
    TokenData:
      type: "object"
      properties:
        accessToken:
          type: "string"
        refreshToken:
          type: "string"
      required:
      - "accessToken"
      - "refreshToken"
    SimpleUser:
      type: "object"
      properties:
        email:
          type: "string"
        password:
          type: "string"
      required:
      - "email"
      - "password"
    RefreshToken:
      type: "object"
      properties:
        token:
          type: "string"
      required:
      - "token"
    SignupResponse:
      type: "object"
      properties:
        emailSent:
          type: "boolean"
        message:
          type: "string"
      required:
      - "emailSent"
      - "message"
    ExposedUser:
      type: "object"
      properties:
        email:
          type: "string"
        password:
          type: "string"
        verified:
          type: "boolean"
      required:
      - "email"
      - "password"
      - "verified"
  securitySchemes:
    matchme-jwt-auth:
      bearerFormat: "JWT"
      type: "http"
      scheme: "bearer"
security: []
tags: []
